@article{flake2020a,
  author = {Flake, Peter and Moorby, Phil and Golson, Steve and Salz, Arturo and Davidmann, Simon},
  title = {Verilog HDL and its ancestors and descendants},
  language = {eng},
  format = {article},
  journal = {Proceedings of the Acm on Programming Languages},
  volume = {4},
  number = {HOPL},
  pages = {87},
  year = {2020},
  issn = {24751421},
  publisher = {Association for Computing Machinery},
  doi = {10.1145/3386337}
}
@article{sutherland2015uvm,
  title={UVM Rapid Adoption: A Practical Subset of UVM},
  author={Sutherland, Stuart and Fitzpatrick, Tom},
  journal={Proceedings of DVCon},
  year={2015}
}
@article{dvcon2014reset,
  title={Reboot your Reset Methodology: Resetting Anytime with the UVM Reset Package},
  author={Courtney Schmitt, Phu Huynh, Stephanie McInnis and Uwe Simm},
  journal={Proceedings of DVCon},
  year={2014},
  url={https://dvcon-proceedings.org/document/reboot-your-reset-methodology-resetting-anytime-with-the-uvm-reset-package/}  
}
@article{kern1999formal,
author = {Kern, Christoph and Greenstreet, Mark R.},
title = {Formal verification in hardware design: a survey},
year = {1999},
issue_date = {April 1999},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {2},
issn = {1084-4309},
url = {https://doi.org/10.1145/307988.307989},
doi = {10.1145/307988.307989},
abstract = {In recent years, formal methods have emerged as an alternative approach to ensuring the quality and correctness of hardware designs, overcoming some of the limitations of traditional validation techniques such as simulation and testing.There are two main aspects to the application of formal methods in a design process: the formal framework used to specify desired properties of a design and the verification techniques and tools used to reason about the relationship between a specification and a corresponding implementation. We survey a variety of frameworks and techniques proposed in the literature and applied to actual designs. The specification frameworks we describe include temporal logics, predicate logic, abstraction and refinement, as well as containment between  ω-regular languages. The verification techniques presented include model checking, automata-theoretic techniques, automated theorem proving, and approaches that integrate the above methods.In order to provide insight into the scope and limitations of currently available techniques, we present a selection of case studies where formal methods were applied to industrial-scale designs, such as microprocessors, floating-point hardware, protocols, memory subsystems, and communications hardware.},
journal = {ACM Trans. Des. Autom. Electron. Syst.},
month = apr,
pages = {123–193},
numpages = {71},
keywords = {theorem proving, survey, model checking, language containment, hardware verification, formal verification, formal methods, case studies}
}
@article{chi2022a,
  author = {Chi, Yuan and Lin, Xian and Zheng, Xin},
  title = {Design of High-performance SoC Simulation Model Based on Verilator},
  language = {eng},
  format = {article},
  journal = {Acm International Conference Proceeding Series},
  pages = {92},
  year = {2022},
  isbn = {1450398332, 9781450398336, 1450398340, 9781450398343},
  publisher = {Association for Computing Machinery},
  doi = {10.1145/3579654.3579751}
}
@article{chiselverify,
title = {Verification of Chisel Hardware Designs with ChiselVerify},
journal = {Microprocessors and Microsystems},
volume = {96},
pages = {104737},
year = {2023},
issn = {0141-9331},
doi = {https://doi.org/10.1016/j.micpro.2022.104737},
url = {https://www.sciencedirect.com/science/article/pii/S0141933122002666},
author = {Amelia Dobis and Kevin Laeufer and Hans Jakob Damsgaard and Tjark Petersen and Kasper Juul Hesse Rasmussen and Enrico Tolotto and Simon Thye Andersen and Richard Lin and Martin Schoeberl},
keywords = {Digital design, Verification, Chisel, Scala},
abstract = {With the current ever-increasing demand for performance, hardware developers find themselves turning ever-more towards the construction of application-specific accelerators to achieve higher performance and lower energy consumption. In order to meet the ever-shortening time constraints, both hardware development and verification tools need to be improved. Chisel, as a hardware construction language, tackles this problem by speeding up the development of digital designs. However, the Chisel infrastructure lacks tools for verification. This paper improves the efficiency of verification in Chisel by proposing methods to support both formal and dynamic verification of digital designs in Scala. It builds on top of ChiselTest, the official testing framework for Chisel. Our work supports functional coverage, constrained random verification, bus functional models, and transaction-level modeling in a verification library named ChiselVerify, while the formal methods are directly integrated into Chisel3.}
}
@article{actors,
title = {Actors: A unifying model for parallel and distributed computing},
journal = {Journal of Systems Architecture},
volume = {45},
number = {15},
pages = {1263-1277},
year = {1999},
issn = {1383-7621},
doi = {https://doi.org/10.1016/S1383-7621(98)00067-8},
url = {https://www.sciencedirect.com/science/article/pii/S1383762198000678},
author = {Gul A Agha and Wooyoung Kim},
keywords = {Parallel computing, Distributed computing, Actors, Concurrency},
abstract = {Parallel computing and distributed computing have traditionally evolved as two separate research disciplines. Parallel computing has addressed problems of communication-intensive computation on tightly-coupled processors while distributed computing has been concerned with coordination, availability, timeliness, etc., of more loosely coupled computations. Current trends, such as parallel computing on networks of conventional processors and Internet computing, suggest the advantages of unifying these two disciplines. Actors provide a flexible model of computation which supports both parallel and distributed computing. One may evaluate the utility of a programming paradigm in terms of four criteria: expressiveness, portability, efficiency, and performance predictability. We discuss how the Actor model and programming methods based on it support these goals. In particular, we provide an overview of the state of the art in Actor languages and their implementation. Finally, we place this work in the context of recent developments in middleware, the Java language, and agents.}
}
@article{chiselpaper,
  author = {Bachrach, Jonathan and Vo, Huy and Richards, Brian and Lee, Yunsup and Waterman, Andrew and Avižienis, Rimas and Wawrzynek, John and Asanović, Krste},
  title = {Chisel},
  language = {eng},
  format = {article},
  journal = {Proceedings of the 49th Annual Design Automation Conference},
  pages = {1216-1225},
  year = {2012},
  doi = {10.1145/2228360.2228584}
}
